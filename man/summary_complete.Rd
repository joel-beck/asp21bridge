% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/summary_complete.R
\name{summary_complete}
\alias{summary_complete}
\title{Display and access results of Markov Chain Monte Carlo sampling}
\usage{
summary_complete(samples, include_plot = FALSE)
}
\arguments{
\item{samples}{Model object of the class 'lslm', list, matrix or numeric
vector containing samples of the MCMC sampler.}

\item{include_plot}{If TRUE, an additional column containing diagnostic plots
for the posterior samples of the corresponding coefficient
is added. This option allows for easy access to visual
confirmation of the numerical results during a data
frame manipulation workflow. \cr
Plots are generated by the \code{diagnostic_plots()} function
with chosen parameter values \code{lag_max = 30},
\code{robust = TRUE} and \code{latex = TRUE}. \cr
Default: FALSE}
}
\value{
A tibble with one row for each coefficient and one column for each
summary statistic.
}
\description{
The \code{summary_complete()} function calculates summary statistics
of the posterior samples for all coefficients included in the
model. The output is collected in a single data frame enabling a
convenient analysis with common data frame filtering and
manipulation methods. \cr
In contrast to the generic \code{summary()} function, which primarily
serves as an informative visual display, each entry of the data
frame output can be easily accessed and saved in a variable.
}
\examples{
fit <- lslm(
  location = y ~ x1 + x2 + z1 + z2, scale = ~ z1 + z2,
  data = toy_data, light = FALSE
) \%>\%
  gibbs_sampler(num_sim = 1000)

# list of 4 matrices with 1000 rows each
samples <- fit$mcmc_ridge$sampling_matrices

# model input
summary_complete(fit)

# list input
summary_complete(samples)

# matrix input
summary_complete(samples$location)

# numeric vector input
summary_complete(samples$location[, 2])

# keep 'Parameter' column with single column matrix
summary_complete(samples$location[, 2, drop = FALSE])

# extract diagnostic plot during data frame analysis
summary_complete(fit, include_plot = TRUE) \%>\%
  dplyr::filter(Parameter == "beta_1") \%>\%
  dplyr::pull(Plot)

}
